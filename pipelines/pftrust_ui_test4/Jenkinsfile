pipeline {
    agent any

    environment {
        GITHUB_TOKEN = credentials('github-access')  // Pull GitHub token securely
    }

    stages {
        stage('Checkout') {
            steps {
                withCredentials([string(credentialsId: 'github-access', variable: 'GITHUB_TOKEN')]) {
                    git branch: 'main', url: "https://github.com/Sandeepkulkarnib/jenkins-pipelines.git"
                }
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'nvm install 16 && nvm use 16'
                sh 'npm install --legacy-peer-deps'
            }
        }

        stage('Audit Dependencies') {
            steps {
                sh 'npm audit fix || true'
            }
        }

        stage('Build Application') {
            steps {
                sh 'npm run build'
                sh 'npx browserslist@latest --update-db'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                // Use Jenkins credentials for SONAR_TOKEN securely
                withCredentials([string(credentialsId: 'sonar-access', variable: 'SONAR_TOKEN')]) {
                    withSonarQubeEnv('SonarQube') {
                        sh '''
                        sonar-scanner \
                          -Dsonar.projectKey=pftrust-ui \
                          -Dsonar.sources=. \
                          -Dsonar.host.url=http://3.110.35.227:9000 \
                          -Dsonar.token=$SONAR_TOKEN
                        '''
                    }
                }
            }
        }

        stage('Quality Gate') {
            steps {
                timeout(time: 2, unit: 'MINUTES') {
                    script {
                        def qualityGate = waitForQualityGate(abortPipeline: true)
                        if (qualityGate.status != 'OK') {
                            error "Pipeline aborted due to Quality Gate failure: ${qualityGate.status}"
                        }
                    }
                }
            }
        }


        stage('Docker Build & Push') {
            steps {
                sh '''
                docker build -t pftrust-ui:latest .
                docker tag pftrust-ui:latest 031805916358.dkr.ecr.ap-south-1.amazonaws.com/pftrust-ui:latest
                docker push 031805916358.dkr.ecr.ap-south-1.amazonaws.com/pftrust-ui:latest
                '''
            }
        }

        stage('Deploy Container') {
            steps {
                sh '''
                docker ps -q --filter "name=pftrust-ui-test-4" | grep -q . && docker stop pftrust-ui-test-4 && docker rm pftrust-ui-test-4 || true
                docker run -d --name pftrust-ui-test-4 -p 8088:80 031805916358.dkr.ecr.ap-south-1.amazonaws.com/pftrust-ui:latest
                '''
            }
        }
    }

    post {
        success {
            echo 'Application successfully pushed to ECR and deployed!'
        }
        failure {
            echo 'Pipeline failed. Please check logs for details.'
        }
    }
}
