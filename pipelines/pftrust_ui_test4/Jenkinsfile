pipeline {
    agent any

    environment {
        AWS_REGION = 'ap-south-1'
        ECR_REPO_URI = '031805916358.dkr.ecr.ap-south-1.amazonaws.com/pftrust-ui'
        IMAGE_TAG = "latest"
        SONAR_HOST_URL = 'http://3.110.35.227:9000'
        SONAR_PROJECT_KEY = 'pftrust-ui'
    }

    stages {
        stage('Clone Repository') {
            steps {
                git branch: 'main', url: 'https://github.com/Sandeepkulkarnib/pftrust-ui'
            }
        }

        stage('Install Dependencies') {
            steps {
                sh 'npm install'
            }
        }

        stage('Lint Code') {
            steps {
                sh 'npm run lint'
            }
        }

        stage('Build Application') {
            steps {
                sh 'npm run build'
            }
        }

        stage('SonarQube Analysis') {
            environment {
                SONAR_TOKEN = credentials('sonar-access') // Replace with your Jenkins credential ID
            }
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh '''
                    sonar-scanner \
                        -Dsonar.projectKey=${SONAR_PROJECT_KEY} \
                        -Dsonar.sources=. \
                        -Dsonar.host.url=${SONAR_HOST_URL} \
                        -Dsonar.token=${SONAR_TOKEN}
                    '''
                }
            }
        }

stage('Quality Gate') {
    steps {
        script {
            retry(5) { // Retry 3 times in case of failure
                timeout(time: 1, unit: 'MINUTES') { // Timeout in 5 minutes
                    def qualityGate
                    while (true) {
                        // Polling status manually every 5 seconds
                        sleep(5) // Adjust polling interval (in seconds)
                        qualityGate = waitForQualityGate()
                        if (qualityGate.status == 'SUCCESS') {
                            echo "Quality Gate PASSED"
                            break
                        } else if (qualityGate.status == 'FAILED') {
                            error "Pipeline failed due to quality gate failure: ${qualityGate.status}"
                        }
                    }
                }
            }
        }
    }
}


        stage('Print SonarQube Report URL') {
            steps {
                script {
                    def sonarUrl = "${SONAR_HOST_URL}/dashboard?id=${SONAR_PROJECT_KEY}"
                    echo "SonarQube Report URL: ${sonarUrl}"
                }
            }
        }

        stage('Build Docker Image') {
            steps {
                sh 'docker build -t pftrust-ui:${IMAGE_TAG} .'
            }
        }

        stage('Login to ECR') {
            steps {
                sh '''
                aws ecr get-login-password --region ${AWS_REGION} | \
                docker login --username AWS --password-stdin ${ECR_REPO_URI}
                '''
            }
        }

        stage('Tag and Push to ECR') {
            steps {
                sh '''
                docker tag pftrust-ui:${IMAGE_TAG} ${ECR_REPO_URI}:${IMAGE_TAG}
                docker push ${ECR_REPO_URI}:${IMAGE_TAG}
                '''
            }
        }

        stage('Deploy Container') {
            steps {
                sh '''
                docker stop pftrust-ui-test-4 || true
                docker rm pftrust-ui-test-4 || true
                docker run -d --name pftrust-ui-test-4 -p 8088:80 ${ECR_REPO_URI}:${IMAGE_TAG}
                '''
            }
        }
    }

    post {
        success {
            echo 'Application successfully pushed to ECR and deployed!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
